{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jason/devTools/code/snake_game/snake-game-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jason/devTools/code/snake_game/snake-game-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport axios from 'axios';\nvar API_BASE_URL = 'http://localhost:8080/api';\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      width: 20,\n      height: 10,\n      board: [],\n      score: 0,\n      gameOver: false,\n      gameInterval: null,\n      lastDirection: null\n    };\n  },\n  created: function created() {\n    this.initializeBoard();\n    this.startGame();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.stopGame();\n  },\n  methods: {\n    initializeBoard: function initializeBoard() {\n      this.board = Array(this.width * this.height).fill({\n        type: 'empty'\n      });\n    },\n    startGame: function startGame() {\n      this.gameInterval = setInterval(this.updateGame, 100);\n      document.addEventListener('keydown', this.handleKeyPress);\n    },\n    stopGame: function stopGame() {\n      clearInterval(this.gameInterval);\n      document.removeEventListener('keydown', this.handleKeyPress);\n    },\n    handleKeyPress: function handleKeyPress(event) {\n      if (this.gameOver) return;\n      switch (event.key) {\n        case 'ArrowUp':\n          if (this.lastDirection !== 'down') {\n            this.move('up');\n            this.lastDirection = 'up';\n          }\n          break;\n        case 'ArrowDown':\n          if (this.lastDirection !== 'up') {\n            this.move('down');\n            this.lastDirection = 'down';\n          }\n          break;\n        case 'ArrowLeft':\n          if (this.lastDirection !== 'right') {\n            this.move('left');\n            this.lastDirection = 'left';\n          }\n          break;\n        case 'ArrowRight':\n          if (this.lastDirection !== 'left') {\n            this.move('right');\n            this.lastDirection = 'right';\n          }\n          break;\n      }\n    },\n    move: function move(direction) {\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.post(\"\".concat(API_BASE_URL, \"/move\"), {\n                direction: direction\n              });\n            case 3:\n              _context.next = 8;\n              break;\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error moving:', _context.t0);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 5]]);\n      }))();\n    },\n    updateGame: function updateGame() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response, _response$data, board, score, gameOver;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.get(\"\".concat(API_BASE_URL, \"/state\"));\n            case 3:\n              response = _context2.sent;\n              _response$data = response.data, board = _response$data.board, score = _response$data.score, gameOver = _response$data.gameOver; // Flatten the 2D board array\n              _this.board = board.flat().map(function (type) {\n                return {\n                  type: type\n                };\n              });\n              _this.score = score;\n              _this.gameOver = gameOver;\n              if (gameOver) {\n                _this.stopGame();\n              }\n              _context2.next = 14;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error updating game:', _context2.t0);\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 11]]);\n      }))();\n    },\n    restartGame: function restartGame() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return axios.post(\"\".concat(API_BASE_URL, \"/restart\"));\n            case 3:\n              _this2.score = 0;\n              _this2.gameOver = false;\n              _this2.lastDirection = null;\n              _this2.startGame();\n              _context3.next = 12;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Error restarting game:', _context3.t0);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 9]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","name","data","width","height","board","score","gameOver","gameInterval","lastDirection","created","initializeBoard","startGame","beforeUnmount","stopGame","methods","Array","fill","type","setInterval","updateGame","document","addEventListener","handleKeyPress","clearInterval","removeEventListener","event","key","move","direction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","post","concat","t0","console","error","stop","_this","_callee2","response","_response$data","_callee2$","_context2","get","sent","flat","map","restartGame","_this2","_callee3","_callee3$","_context3"],"sources":["/Users/jason/devTools/code/snake_game/snake-game-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app\">\n    <div class=\"game-container\">\n      <h1>Snake Game</h1>\n      <div class=\"game-board\" :style=\"{ gridTemplateColumns: `repeat(${width}, 1fr)` }\">\n        <div\n          v-for=\"(cell, index) in board\"\n          :key=\"index\"\n          :class=\"['cell', cell.type]\"\n        ></div>\n      </div>\n      <div class=\"game-info\">\n        <div class=\"score\">Score: {{ score }}</div>\n        <div v-if=\"gameOver\" class=\"game-over\">\n          Game Over!\n          <button @click=\"restartGame\">Play Again</button>\n        </div>\n      </div>\n      <div class=\"controls\">\n        <button @click=\"move('up')\">↑</button>\n        <div class=\"horizontal-controls\">\n          <button @click=\"move('left')\">←</button>\n          <button @click=\"move('right')\">→</button>\n        </div>\n        <button @click=\"move('down')\">↓</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      width: 20,\n      height: 10,\n      board: [],\n      score: 0,\n      gameOver: false,\n      gameInterval: null,\n      lastDirection: null\n    };\n  },\n  created() {\n    this.initializeBoard();\n    this.startGame();\n  },\n  beforeUnmount() {\n    this.stopGame();\n  },\n  methods: {\n    initializeBoard() {\n      this.board = Array(this.width * this.height).fill({ type: 'empty' });\n    },\n    startGame() {\n      this.gameInterval = setInterval(this.updateGame, 100);\n      document.addEventListener('keydown', this.handleKeyPress);\n    },\n    stopGame() {\n      clearInterval(this.gameInterval);\n      document.removeEventListener('keydown', this.handleKeyPress);\n    },\n    handleKeyPress(event) {\n      if (this.gameOver) return;\n      \n      switch(event.key) {\n        case 'ArrowUp':\n          if (this.lastDirection !== 'down') {\n            this.move('up');\n            this.lastDirection = 'up';\n          }\n          break;\n        case 'ArrowDown':\n          if (this.lastDirection !== 'up') {\n            this.move('down');\n            this.lastDirection = 'down';\n          }\n          break;\n        case 'ArrowLeft':\n          if (this.lastDirection !== 'right') {\n            this.move('left');\n            this.lastDirection = 'left';\n          }\n          break;\n        case 'ArrowRight':\n          if (this.lastDirection !== 'left') {\n            this.move('right');\n            this.lastDirection = 'right';\n          }\n          break;\n      }\n    },\n    async move(direction) {\n      try {\n        await axios.post(`${API_BASE_URL}/move`, { direction });\n      } catch (error) {\n        console.error('Error moving:', error);\n      }\n    },\n    async updateGame() {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/state`);\n        const { board, score, gameOver } = response.data;\n        \n        // Flatten the 2D board array\n        this.board = board.flat().map(type => ({ type }));\n        this.score = score;\n        this.gameOver = gameOver;\n        \n        if (gameOver) {\n          this.stopGame();\n        }\n      } catch (error) {\n        console.error('Error updating game:', error);\n      }\n    },\n    async restartGame() {\n      try {\n        await axios.post(`${API_BASE_URL}/restart`);\n        this.score = 0;\n        this.gameOver = false;\n        this.lastDirection = null;\n        this.startGame();\n      } catch (error) {\n        console.error('Error restarting game:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.app {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.game-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 1rem;\n}\n\n.game-board {\n  display: grid;\n  gap: 2px;\n  background-color: #ddd;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.cell {\n  aspect-ratio: 1;\n  background-color: white;\n  border-radius: 2px;\n}\n\n.cell.snake {\n  background-color: #4CAF50;\n}\n\n.cell.food {\n  background-color: #f44336;\n}\n\n.game-info {\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.score {\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n\n.game-over {\n  color: #f44336;\n  margin-top: 1rem;\n}\n\n.controls {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 1rem;\n  gap: 0.5rem;\n}\n\n.horizontal-controls {\n  display: flex;\n  gap: 0.5rem;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  font-size: 1.2rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\nbutton:active {\n  transform: scale(0.95);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}