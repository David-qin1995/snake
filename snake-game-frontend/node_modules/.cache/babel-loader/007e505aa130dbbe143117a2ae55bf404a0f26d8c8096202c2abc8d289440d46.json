{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\nexport default {\n  name: 'App',\n  data() {\n    return {\n      width: 20,\n      height: 10,\n      board: [],\n      score: 0,\n      gameOver: false,\n      gameInterval: null\n    };\n  },\n  created() {\n    this.initializeBoard();\n    this.startGame();\n  },\n  beforeUnmount() {\n    this.stopGame();\n  },\n  methods: {\n    initializeBoard() {\n      this.board = Array(this.width * this.height).fill({\n        type: 'empty'\n      });\n    },\n    startGame() {\n      this.gameInterval = setInterval(this.updateGame, 200);\n      document.addEventListener('keydown', this.handleKeyPress);\n    },\n    stopGame() {\n      clearInterval(this.gameInterval);\n      document.removeEventListener('keydown', this.handleKeyPress);\n    },\n    handleKeyPress(event) {\n      switch (event.key) {\n        case 'ArrowUp':\n          this.move('up');\n          break;\n        case 'ArrowDown':\n          this.move('down');\n          break;\n        case 'ArrowLeft':\n          this.move('left');\n          break;\n        case 'ArrowRight':\n          this.move('right');\n          break;\n      }\n    },\n    async move(direction) {\n      try {\n        await axios.post(`${API_BASE_URL}/move`, {\n          direction\n        });\n        await this.updateGame();\n      } catch (error) {\n        console.error('Error moving:', error);\n      }\n    },\n    async updateGame() {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/state`);\n        const {\n          board,\n          score,\n          gameOver\n        } = response.data;\n\n        // Flatten the 2D board array\n        this.board = board.flat().map(type => ({\n          type\n        }));\n        this.score = score;\n        this.gameOver = gameOver;\n        if (gameOver) {\n          this.stopGame();\n        }\n      } catch (error) {\n        console.error('Error updating game:', error);\n      }\n    },\n    async restartGame() {\n      try {\n        await axios.post(`${API_BASE_URL}/restart`);\n        this.score = 0;\n        this.gameOver = false;\n        this.startGame();\n      } catch (error) {\n        console.error('Error restarting game:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","name","data","width","height","board","score","gameOver","gameInterval","created","initializeBoard","startGame","beforeUnmount","stopGame","methods","Array","fill","type","setInterval","updateGame","document","addEventListener","handleKeyPress","clearInterval","removeEventListener","event","key","move","direction","post","error","console","response","get","flat","map","restartGame"],"sources":["/Users/jason/devTools/code/snake_game/snake-game-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app\">\n    <div class=\"game-container\">\n      <h1>Snake Game</h1>\n      <div class=\"game-board\" :style=\"{ gridTemplateColumns: `repeat(${width}, 1fr)` }\">\n        <div\n          v-for=\"(cell, index) in board\"\n          :key=\"index\"\n          :class=\"['cell', cell.type]\"\n        ></div>\n      </div>\n      <div class=\"game-info\">\n        <div class=\"score\">Score: {{ score }}</div>\n        <div v-if=\"gameOver\" class=\"game-over\">\n          Game Over!\n          <button @click=\"restartGame\">Play Again</button>\n        </div>\n      </div>\n      <div class=\"controls\">\n        <button @click=\"move('up')\">↑</button>\n        <div class=\"horizontal-controls\">\n          <button @click=\"move('left')\">←</button>\n          <button @click=\"move('right')\">→</button>\n        </div>\n        <button @click=\"move('down')\">↓</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      width: 20,\n      height: 10,\n      board: [],\n      score: 0,\n      gameOver: false,\n      gameInterval: null\n    };\n  },\n  created() {\n    this.initializeBoard();\n    this.startGame();\n  },\n  beforeUnmount() {\n    this.stopGame();\n  },\n  methods: {\n    initializeBoard() {\n      this.board = Array(this.width * this.height).fill({ type: 'empty' });\n    },\n    startGame() {\n      this.gameInterval = setInterval(this.updateGame, 200);\n      document.addEventListener('keydown', this.handleKeyPress);\n    },\n    stopGame() {\n      clearInterval(this.gameInterval);\n      document.removeEventListener('keydown', this.handleKeyPress);\n    },\n    handleKeyPress(event) {\n      switch(event.key) {\n        case 'ArrowUp':\n          this.move('up');\n          break;\n        case 'ArrowDown':\n          this.move('down');\n          break;\n        case 'ArrowLeft':\n          this.move('left');\n          break;\n        case 'ArrowRight':\n          this.move('right');\n          break;\n      }\n    },\n    async move(direction) {\n      try {\n        await axios.post(`${API_BASE_URL}/move`, { direction });\n        await this.updateGame();\n      } catch (error) {\n        console.error('Error moving:', error);\n      }\n    },\n    async updateGame() {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/state`);\n        const { board, score, gameOver } = response.data;\n        \n        // Flatten the 2D board array\n        this.board = board.flat().map(type => ({ type }));\n        this.score = score;\n        this.gameOver = gameOver;\n        \n        if (gameOver) {\n          this.stopGame();\n        }\n      } catch (error) {\n        console.error('Error updating game:', error);\n      }\n    },\n    async restartGame() {\n      try {\n        await axios.post(`${API_BASE_URL}/restart`);\n        this.score = 0;\n        this.gameOver = false;\n        this.startGame();\n      } catch (error) {\n        console.error('Error restarting game:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.app {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.game-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 1rem;\n}\n\n.game-board {\n  display: grid;\n  gap: 2px;\n  background-color: #ddd;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.cell {\n  aspect-ratio: 1;\n  background-color: white;\n  border-radius: 2px;\n}\n\n.cell.snake {\n  background-color: #4CAF50;\n}\n\n.cell.food {\n  background-color: #f44336;\n}\n\n.game-info {\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.score {\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n\n.game-over {\n  color: #f44336;\n  margin-top: 1rem;\n}\n\n.controls {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 1rem;\n  gap: 0.5rem;\n}\n\n.horizontal-controls {\n  display: flex;\n  gap: 0.5rem;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  font-size: 1.2rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\nbutton:active {\n  transform: scale(0.95);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}